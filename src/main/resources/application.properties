
# 需要启动的服务包括
# 1.mysql服务 命令service mysqld start 或者命令systemctl start mysql
# 2.rocketMQ服务 进入bin目录 先启动namesrv nohup sh mqnamesrv & 再启动broker nohup sh mqbroker -c ../conf/broker.conf &
# 3.activeMQ服务 进入bin目录 ./activemq start
# 4.elasticsearch服务 切换用户 su esUser 进入bin目录 nohup ./elasticsearch &
# 5.redis服务 进入redis中目录 src/redis-server &

# 如果需要 rocketmq 控制台，还需要启动rocketmq控制台服务
# 进入/usr/software/rocketmq-all-4.7.1-bin-release/rocketmq-externals/rocketmq-console/target
# 运行命令 java -jar rocketmq-console-ng-2.0.0.jar --server.port=8082 --rocketmq.config.namesrvAddr=182.92.233.47:9876 &



#############################################服务基本配置############################
#上传文件存放位置
web.image_path=D:/sysfiles/
# 服务端口
server.port=8088

# 优雅关闭
server.shutdown=graceful

# 读取的配置文件环境（开发还是测试还是其他）
spring.profiles.active=test



## spring-boot启动的时候  默认加载的资源文件夹
spring.resources.static-locations = classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,\
  classpath:/test/,file:${web.image_path},classpath:/templates/

# ${}表示的是取值；

# 热部署--创建触发器 就是当指定的文件修改时 才会进行重启
#热部署生效
spring.devtools.restart.enabled=true
spring.devtools.restart.trigger-file=trigger.txt
# 指定的文件不监听不进行热部署
# spring.devtools.restart.additional-exclude=application.properties,static/**,public/**

#############################################自定义banner############################

##自定义Spring-boot启动  banner
##spring.banner.location=banner.txt

###整合freemarker配置 与 整合thymeleaf的配置不能同时使用 不然就杂交了。

# 启用彩色输出
spring.output.ansi.enabled=DETECT
##always
#############################################整合freemarker配置############################

# 是否开启thymeleaf缓存,本地环境为false，生产环境建议为true
#spring.freemarker.cache=false
##
#spring.freemarker.charset=UTF-8
#spring.freemarker.allow-request-override=false
#spring.freemarker.check-template-location=true
##
###类型
#spring.freemarker.content-type=text/html
##
#spring.freemarker.expose-request-attributes=true
#spring.freemarker.expose-session-attributes=true
##
###文件后缀
#spring.freemarker.suffix=.ftl
###路径的
##前缀
## 这个地方的prefix和controller里面写的拼起来要能找到最终的文件。。。。。
## 这个地方没写/fm/ 在FreemarkerController中return "index"前面就要/fm/了
#spring.freemarker.template-loader-path=classpath:/templates/

###################################整合thymeleaf timelif配置#######################################################
# thymeleaf基础配置
# 开发时关闭缓存，不然没法看到实时页面
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
##前缀
## 这个地方的prefix和controller里面写的拼起来要能找到最终的文件。。。。。
## 这个地方写了/tl/ 在ThymeleafController中return "index"前面就不要/tl/了
spring.thymeleaf.prefix=classpath:/templates/tl/
##编码
spring.thymeleaf.encoding=utf-8
##类型
#spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.servlet.content-type=text/html
##名称的后缀
spring.thymeleaf.suffix=.html

###################################整合mybatis配置#######################################################

##配置驱动
##可以自动识别[猜测是通过pom里面的依赖]
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://182.92.233.47:3306/zohn?useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=rootroot123456
##不是用默认的数据源  默认的数据源com.zaxxer.hikari.HikariDataSource
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
## 加载配置，注入到sqlSessionFactory等都是springBoot帮我们完成

##mybatis的crud

#控制台显示sql
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl


# mybatis 下划线转驼峰配置,两者都可以
#mybatis.configuration.mapUnderscoreToCamelCase=true
#mybatis.configuration.map-underscore-to-camel-case=true# mybatis 下划线转驼峰配置,两者都可以
#mybatis.configuration.mapUnderscoreToCamelCase=true
mybatis.configuration.map-underscore-to-camel-case=true

###################################整合redis配置#######################################################

spring.redis.database=0
spring.redis.host=182.92.233.47
spring.redis.port=6379

#连接超时时间
spring.redis.timeout=3000s

#reids======线程池设置==========  #如果赋值为-1 则表示不限制；
#连接池中的最大空闲连接数 默认值为8
spring.redis.jedis.pool.max-idle=200

#连接池中的最小空闲连接数 默认值为0
spring.redis.jedis.pool.min-idle=200

#pool已经分配了maxActive个jedis的实力，则此时pool的状态为exhausted(耗尽)
spring.redis.jedis.pool.max-active=2000

#等待可用连接的最大时间 单位毫秒 默认值为-1 表示永不超时
spring.redis.jedis.pool.max-wait=1000s


###################################################日志框架###################################
###log4j.rootLogger = debug,stdout,D,E

### 输出信息到控制抬 ###
###log4j.appender.stdout = org.apache.log4j.ConsoleAppender
###log4j.appender.stdout.Target = System.out
###log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
###log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n


### 输出DEBUG 级别以上的日志到=D://logs/error.log ###
###log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
###log4j.appender.D.File = D://logs/log.log
###log4j.appender.D.Append = true
###log4j.appender.D.Threshold = DEBUG
###log4j.appender.D.layout = org.apache.log4j.PatternLayout
###log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


### 输出ERROR 级别以上的日志到=D://logs/error.log ###
###log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
###log4j.appender.E.File =E://logs/error.log
###log4j.appender.E.Append = true
###log4j.appender.E.Threshold = ERROR
###log4j.appender.E.layout = org.apache.log4j.PatternLayout
###log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


###################################################ELASTICSEARCH###################################
# ELASTICSEARCH (ElasticsearchProperties)
# 提供服务是9300 在浏览器访问es自己是9200
spring.data.elasticsearch.cluster-name=elasticsearch
spring.data.elasticsearch.cluster-nodes=182.92.233.47:9300
# Whether to enable Elasticsearch repositories.
spring.data.elasticsearch.repositories.enabled=true

###################################################Active MQ###################################
## 消息队列
spring.activemq.broker-url=tcp://182.92.233.47:61616
#spring.activemq.broker-url=failover:(tcp://localhost:61616,tcp://localhost:61617)
spring.activemq.user=admin
spring.activemq.password=admin
#开启连接池
spring.activemq.pool.enabled=true
spring.activemq.pool.max-connections=100

# default point to point
# 开启发布订阅模式 给topic定义独立的JmsListenerContainer 下面一行需要注释掉。
# 这样就同时支持点对点和发布订阅模型了。
# spring.jms.pub-sub-domain=true

###################################################Rocket MQ###################################
# 消费者的组名
apache.rocketmq.consumer.PushConsumer=orderConsumer
# 生产者的组名
apache.rocketmq.producer.producerGroup=Producer
# NameServer地址
apache.rocketmq.namesrvAddr=182.92.233.47:9876

# ====================================================================微信相关==========================================
# 公众号
wxpay.appid=wx5beac15ca207cdd40c
wxpay.appsecret=554801238f17fdsdsdd6f96b382fe548215e9

#微信开放平台配置
#AppID
#看课程时候学习用的
wxopen.appid=wx025575eac69a2d5b
#自己用测试账号做的（后来发现不是开放平台，而是公众平台的）
#wxopen.appid=wxc7a28f74dbc93a3d
#AppSecret
#看课程时候学习用的
wxopen.appsecret=f5b6730c592ac15b8b1a5aeb8948a9f3
#自己用测试账号做的（后来发现不是开放平台，而是公众平台的）
#wxopen.appsecret=6ce289fbb2ab01aa6defb0fe032616ca
#授权回调域 就是微信扫码点击登陆，登录成功之后，调用的自己项目的地址，在微信接入里面的配置
#看课程时候学习用的
wxopen.redirect_url=http://16webtest.ngrok.xiaomiqiu.cn


#自己用测试账号做的（后来发现不是开放平台，而是公众平台的）
# http://8390e840.ngrok.io/api/v1/video/page
#wxopen.redirect_url=http://8390e840.ngrok.io

##
# 微信开放平台的授权回调域要写这个 http://ac613ecc.ngrok.io 就是自己应用映射的
# 用户使用第三方应用->用户点击微信登录->第三方应用获取二维码->用户扫码扫码->微信回调
# 微信回调的URL
#wxopen.redirect_url=http://ac613ecc.ngrok.io/api/v1/wechat/user/callback


###################################################Rabbit MQ###################################
# 对于RabbitMQ的支持
spring.rabbitmq.host=182.92.233.47
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
